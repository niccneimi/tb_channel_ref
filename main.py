##############################IMPORTS################################
from aiogram import Bot, Dispatcher, F
from aiogram.types import ChatMemberUpdated
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.filters import CommandStart,Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
import asyncio, logging, markups as mk, time
from datetime import datetime, timedelta
from FSM import *
from config import *
from db import Database

bot = Bot(TOKEN)
dp = Dispatcher()
db = Database(r'domophone.db')
#####################################################################

##############################COMANDS################################
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
    if message.from_user.id in admin_list:
        await message.answer(hello_text,reply_markup=mk.admin_main_kb)
    else:  
        await message.answer(hello_text,reply_markup=mk.main_kb)
    await state.clear()
#####################################################################
    
##############################BUTTONS################################
@dp.chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def check_new_user(message: ChatMemberUpdated, state: FSMContext):
    if message.invite_link!=None:
        if not db.new_exists(message.from_user.username):
            db.edit_balance(str(message.invite_link.invite_link))
            db.edit_money(str(message.invite_link.invite_link),40)
            db.add_new(message.from_user.username)
            db.add_new_ref_id(str(message.invite_link.invite_link),message.from_user.username)

@dp.message(change_sub.change_sub1)
async def send_func(message: Message, state: FSMContext):
    mesg = message.text
    if mesg != "–û—Ç–º–µ–Ω–∞":
        try:
            mesg = int(mesg)
            for usr in db.get_all_users():
                db.fast_ed_money(usr[1],(db.get_money(usr[1])//db.get_change())*int(mesg))
            db.edit_change(int(mesg))
            await message.answer('–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞',reply_markup=mk.admin_main_kb)
            await state.clear()
        except:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    else:
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!",reply_markup=mk.admin_main_kb)
        await state.clear()

@dp.message(sender.sender1)
async def send_func(message: Message, state: FSMContext):
    mesg = message.text
    if mesg != "–û—Ç–º–µ–Ω–∞":
        for users_id in db.get_all_users():
            try:
                await bot.send_message(users_id[1],mesg)
            except:
                pass
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",reply_markup=mk.admin_main_kb)
    else:
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!",reply_markup=mk.admin_main_kb)
    await state.clear()

@dp.message(finance.finance1)
async def send_func(message: Message, state: FSMContext):
    card_data = message.text
    if card_data != "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤")
        await state.update_data(card_data = card_data)
        await state.set_state(finance.finance2)
    else:
        if message.from_user.id in admin_list:
            rp_mkp = mk.admin_main_kb
        else:
            rp_mkp = mk.main_kb
        await message.answer('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω—ë–Ω',reply_markup=rp_mkp)
        await state.clear()
    
@dp.message(finance.finance2)
async def send_func(message: Message, state: FSMContext):
    mesg = message.text
    data = await state.get_data()
    if mesg != "–û—Ç–º–µ–Ω–∞":
        mesg_link = db.get_inv_url(message.from_user.id)
        try:
            vivod = -int(mesg)
            if db.get_money(message.from_user.id)>=int(mesg) and int(mesg)>0:
                db.edit_money(mesg_link,vivod)
                tmp_us_name = []
                for us_name in db.get_new_by_ref_id(message.from_user.id):
                    tmp_us_name.append("@"+us_name[0])
                tmp_us_name = '\n'.join(tmp_us_name)
                for admin in admin_list:
                    await bot.send_message(admin,f'–ó–∞–ø—Ä–æ—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç @{message.from_user.username}\n–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:\n{data["card_data"]}\n–°—É–º–º–∞: {mesg} —Ä—É–±–ª–µ–π\n–ï–≥–æ —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞: {mesg_link}\n–ï–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{tmp_us_name}')
                await message.answer('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!',reply_markup=mk.main_kb)
                await state.clear()
            else:
                await message.answer(f'–í—ã–≤–æ–¥ —Å—É–º–º—ã {mesg} –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã, –∏ –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑. –ù–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤')
        except:
            await message.answer(f'–í—ã–≤–æ–¥ —Å—É–º–º—ã {mesg} –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—É–º–º—ã, –∏ –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑')
    else:
        if message.from_user.id in admin_list:
            rp_mkp = mk.admin_main_kb
        else:
            rp_mkp = mk.main_kb
        await message.answer('–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω—ë–Ω',reply_markup=rp_mkp)
        await state.clear()

@dp.message()
async def echo(message: Message, state: FSMContext):
    msg = message.text
    if message.chat.type == 'private':
        if msg == "üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É":
            if not db.get_try_free(message.from_user.id):
                expire_date = datetime.now() + timedelta(days=1000)
                link = await bot.create_chat_invite_link(channel_id, expire_date=expire_date)
                await message.answer(f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n<code>{link.invite_link}</code>",parse_mode='html')
                db.add_inv_url(message.from_user.id,str(link.invite_link))
                db.edit_try_free(message.from_user.id)
            else:
                await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{db.get_inv_url(message.from_user.id)}</code>",parse_mode='html')
        if msg == "üìà C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await message.answer(f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {db.get_balance(message.from_user.id)}\n–ë–∞–ª–∞–Ω—Å: {db.get_money(message.from_user.id)} —Ä—É–±–ª–µ–π")
        if msg == 'üìù –ü—Ä–∞–≤–∏–ª–∞':
            await message.answer(rules)
        if msg == 'üíµ –í—ã–≤–≤–æ–¥ –¥–µ–Ω–µ–≥':
            if db.get_money(message.from_user.id)>=400:
                await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤",reply_markup=mk.cancel_button)
                await state.set_state(finance.finance1)
            else:
                await message.answer('–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ 400 —Ä—É–±–ª–µ–π')
        if message.from_user.id in admin_list:
            if msg == '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
                await message.answer('–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞',reply_markup=mk.cancel_button)
                await state.set_state(sender.sender1)
            if msg == '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                await message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ—Ç–æ–º: {db.get_users_count()}')
            if msg == "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É":
                await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤',reply_markup=mk.cancel_button)
                await state.set_state(change_sub.change_sub1)

#####################################################################

##############################START##################################
async def main():
    await dp.start_polling(bot,allowed_updates=["message", "inline_query", "chat_member"])

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())